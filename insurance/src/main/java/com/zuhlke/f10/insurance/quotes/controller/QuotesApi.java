/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.zuhlke.f10.insurance.quotes.controller;

import com.zuhlke.f10.insurance.model.GenericError;
import com.zuhlke.f10.insurance.model.Invoice;
import com.zuhlke.f10.insurance.model.PurchaseDetails;
import com.zuhlke.f10.insurance.model.QuoteCriteria;
import com.zuhlke.f10.insurance.model.QuoteDetails;
import com.zuhlke.f10.insurance.model.ServerError;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-20T09:25:21.930+08:00")

@Api(value = "quotes", description = "the quotes API")
public interface QuotesApi {


    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Request Quote", nickname = "requestQuote", notes = "", response = QuoteDetails.class, authorizations = {
            @Authorization(value = "Authorization"),
            @Authorization(value = "X-API-Key")
    }, tags={ "Quotes", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "", response = QuoteDetails.class),
            @ApiResponse(code = 400, message = "", response = GenericError.class),
            @ApiResponse(code = 401, message = "", response = GenericError.class),
            @ApiResponse(code = 403, message = "", response = GenericError.class),
            @ApiResponse(code = 500, message = "", response = ServerError.class) })
    @RequestMapping(value = "/quotes/{productId}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<QuoteDetails> requestQuote(@ApiParam(value = "",required=true) @PathVariable("productId") String productId
            ,@ApiParam(value = ""  )  @Valid @RequestBody QuoteCriteria body);


    @ApiOperation(value = "Purchase Insurance", nickname = "purchase", notes = "", response = Invoice.class, authorizations = {
            @Authorization(value = "Authorization"),
            @Authorization(value = "X-API-Key")
    }, tags={ "Quotes", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "", response = Invoice.class),
            @ApiResponse(code = 400, message = "", response = GenericError.class),
            @ApiResponse(code = 401, message = "", response = GenericError.class),
            @ApiResponse(code = 403, message = "", response = GenericError.class),
            @ApiResponse(code = 500, message = "", response = ServerError.class) })
    @RequestMapping(value = "/quotes/{quoteId}/purchase",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Invoice> purchase(@ApiParam(value = "",required=true) @PathVariable("quoteId") String quoteId
            ,@ApiParam(value = ""  )  @Valid @RequestBody PurchaseDetails body);
}
