/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.zuhlke.f10.insurance.products.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.zuhlke.f10.insurance.model.*;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-16T17:46:09.699+08:00")

@Api(value = "products", description = "the products API")
public interface ProductsApi {


    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }


    @ApiOperation(value = "Delete Product", nickname = "deleteProduct", notes = "", authorizations = {
            @Authorization(value = "Authorization"),
            @Authorization(value = "X-API-Key")
    }, tags={ "Products", })
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = ""),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class)
    })
    @RequestMapping(value = "/products/{id}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProduct(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Get Product", nickname = "getProduct", notes = "", response = Product.class, authorizations = {
            @Authorization(value = "Authorization"),
            @Authorization(value = "X-API-Key")
    }, tags={ "Products", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "", response = Product.class),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 404, message = "Not Found", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class)
    })
    @RequestMapping(value = "/products/{id}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Product> getProduct(@ApiParam(value = "",required=true) @PathVariable("id") String id) ;


    @ApiOperation(value = "List Products", nickname = "listProducts", notes = "", response = Product.class, responseContainer = "List", authorizations = {
            @Authorization(value = "Authorization"),
            @Authorization(value = "X-API-Key")
    }, tags={ "Products", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "", response = Product.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class)
    })
    @RequestMapping(value = "/products",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Product>> listProducts();


    @ApiOperation(value = "Create Product", nickname = "createProduct", notes = "", response = Product.class, authorizations = {
            @Authorization(value = "Authorization"),
            @Authorization(value = "X-API-Key")
    }, tags={ "Products", })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "", response = Product.class),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class)
    })
    @RequestMapping(value = "/products",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Product> createProduct(@ApiParam(value = ""  )  @Valid @RequestBody Product body);


    @ApiOperation(value = "Update Product", nickname = "updateProduct", notes = "", response = Product.class, authorizations = {
            @Authorization(value = "Authorization"),
            @Authorization(value = "X-API-Key")
    }, tags={ "Products", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "", response = Product.class),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class)
    })
    @RequestMapping(value = "/products/{id}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Product> updateProduct(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody Product body);
}
